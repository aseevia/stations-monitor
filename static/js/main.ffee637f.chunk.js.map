{"version":3,"sources":["components/StationsList/StationList.js","components/Station/img/icon_available.svg","components/Station/img/icon_offline.svg","components/Station/Station.js","components/StationsDetails/img/icon_arrow--left.svg","components/StationsDetails/StationsDetails.js","StationsMonitor.js","services/StationsDataService.js","reportWebVitals.js","index.js"],"names":["StationList","items","Item","itemClick","className","map","item","onClick","Station","props","name","src","available","iconOn","iconOff","alt","StationsDetails","onRequestClose","arrowLeft","Object","keys","key","dataService","defaultUrl","url","this","delay","then","fetch","res","ok","json","Error","ms","Promise","resolve","setTimeout","StationsMonitor","useReducer","state","newState","busy","busyMessage","stations","activeStation","setState","loadStations","useCallback","get","data","console","log","catch","err","error","closeStationDetails","useEffect","isOpen","contentLabel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Modal","defaultStyles","overlay","zIndex","setAppElement","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffee637f.chunk.js","sourcesContent":["import './StationList.css';\n\nfunction StationList({items, Item, itemClick}) {\n  return (\n    <ul className=\"stm-stations-list\">\n          {\n            items && items.map(item => <Item key={item['station_ID']} onClick={itemClick} item={item} />)\n          }\n    </ul>\n  );\n}\n\nexport default StationList;","export default __webpack_public_path__ + \"static/media/icon_available.f9d945c1.svg\";","export default __webpack_public_path__ + \"static/media/icon_offline.c4124c45.svg\";","import './Station.css';\nimport iconOn from './img/icon_available.svg';\nimport iconOff from './img/icon_offline.svg';\n\nfunction Station(props) {\n  return (\n    <li className=\"stm-station mb05\" onClick={()=>props.onClick(props.item)}>\n      <div className=\"stm-station__in\">\n          <h3 className=\"stm-station__name\">{props.item.name}</h3>\n          <div className=\"stm-station-status\">\n              <img src={props.item.available ? iconOn : iconOff } alt=\"Station status\" className=\"stm-station-status-icon\"/>\n              {props.item.available ? \"Available\" : \"Offline\"}\n          </div>\n          \n      </div>\n    </li>\n  );\n}\n\nexport default Station;","export default __webpack_public_path__ + \"static/media/icon_arrow--left.3e48f6f5.svg\";","import './StationsDetails.css';\nimport arrowLeft from './img/icon_arrow--left.svg'\n\nfunction StationsDetails({item, onRequestClose}) {\n  return (\n    <div className=\"stm-details\">\n      <div className=\"stm-details-header df aic\">\n        <button \n        onClick={onRequestClose} \n        className=\"stm-details-back\">\n          <img src={arrowLeft} alt=\"\" className=\"stm-details-back__icon\"/>\n        </button>\n          <h1 className=\"stm-details-title\">{item.name}</h1>\n\n      </div>\n      <div className=\"stm-details-content\">\n      <ul className=\"stm-details-list\">\n        { Object.keys(item).map(key => (\n          <li key={key} className=\"stm-details-item mb2\">\n            <div className=\"stm-details-item__label\">{key}</div>\n            <div className=\"stm-details-item__value\">{item[key]}</div>\n          </li>\n        )) }\n      </ul>\n      </div>\n    </div>\n    \n  );\n}\n\nexport default StationsDetails;","import './StationsMonitor.css';\nimport StationList from './components/StationsList/StationList';\nimport Station from './components/Station/Station';\nimport { useEffect, useReducer, useCallback } from 'react';\n\nimport Modal from 'react-modal';\nimport StationsDetails from './components/StationsDetails/StationsDetails';\nimport StationsDataService from './services/StationsDataService';\n\nconst dataService = new StationsDataService();\n\nfunction StationsMonitor() {\n  \n  const [state, setState] = useReducer(\n    (state, newState) => ({...state, ...newState}),\n    { \n      busy: false, \n      busyMessage: \"Loading...\",\n      stations: null, \n      activeStation: null,\n     }\n  );\n\n  const loadStations = useCallback(\n    () => {\n      setState({busy: true, busyMessage: \"Loading stations...\"});\n        dataService.get()\n          .then(data => {\n            console.log(\"Stations loaded:\", data);\n            setState({busy: false, stations: data});\n          })\n          .catch(err=>{\n            setState({\n              busy: true, \n              busyMessage: <div><p className=\"mb1\">Failed to load stations</p><button className=\"stm-link\" onClick={()=>loadStations()}>try again</button></div>\n            });\n            console.error(\"Error loading stations:\", err);\n          });\n    },\n    []\n  );\n\n  useEffect(() => {\n    // Get Stations data if the list is empty\n    if (!state.stations && !state.busy) loadStations();\n  }, [state.stations, state.busy, loadStations]);\n\n  \n  function closeStationDetails(){\n    setState({activeStation: null});\n  }\n\n  return (\n    <div className=\"stm\">\n      <div className=\"stm__in\">\n        <div className=\"container\">\n          <h1 className=\"mb1\">Your stations</h1>\n          <StationList items={state.stations} Item={Station} itemClick={(item)=>setState({activeStation: item})}/>\n        </div>\n      </div>\n\n      <Modal\n        isOpen={!!state.activeStation}\n        onRequestClose={closeStationDetails}\n        contentLabel={\"contentLabel\"}\n        className={\"modal\"}\n        // overlayClassName=\"modal-overlay\"\n      >\n      \n      <div className=\"stm\">\n        <div className=\"stm__in\">\n          <div className=\"container\">\n            {\n              state.activeStation && <StationsDetails item={state.activeStation} onRequestClose={closeStationDetails}/>\n            }\n          </div>\n        </div>\n      </div>\n      </Modal>\n\n      <Modal\n        isOpen={state.busy}\n        className={\"modal-message\"}\n        // overlayClassName=\"modal-overlay\"\n      >\n      <div className=\"tac\">{state.busyMessage}</div>\n      </Modal>\n\n    </div>\n  );\n}\n\nexport default StationsMonitor;\n","class StationsDataService {\n    defaultUrl = \"stations.json\"\n    get(url){\n        return this.delay(2000)\n                .then(() => fetch(url || this.defaultUrl))\n                .then(res=>{\n                    if (res.ok) return res.json();\n                    else throw new Error(\"Failed to load stations list\");\n                })\n    }\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n}\n\nexport default StationsDataService;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport '@fontsource/ibm-plex-sans'\nimport '@fontsource/ibm-plex-sans/700.css'\nimport './index.css';\nimport StationsMonitor from './StationsMonitor';\nimport reportWebVitals from './reportWebVitals';\nimport Modal from 'react-modal';\nModal.defaultStyles.overlay.zIndex = '20';\nModal.setAppElement('#root');\n\nReactDOM.render(\n  <React.StrictMode>\n    <StationsMonitor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}